plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi ("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}") { exclude group: 'net.fabricmc', module: 'fabric-loader' }
    // Remove the next line if you don't want to depend on the API
    modApi ("dev.architectury:architectury-fabric:${rootProject.architectury_version}") { exclude group: 'net.fabricmc', module: 'fabric-loader' }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modCompileOnlyApi("curse.maven:supplementaries_fabric-412082:4627387")
    modCompileOnlyApi("curse.maven:create_fabric-624165:4507543") // Not updated
    modCompileOnlyApi("curse.maven:farmers_delight_fabric-482834:4111426") // Not updated
    modCompileOnlyApi("curse.maven:haunted_harvest_fabric-541753:4622563")
    modCompileOnlyApi("curse.maven:sleep_tight_fabric-817564:4610338")
    modCompileOnlyApi("curse.maven:moonlight_fabric-499980:4627904")
    modCompileOnlyApi("curse.maven:fast_paintings_fabric-883287:4621174")
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = "seamless"
    versionNumber = "${rootProject.mod_version}"
    versionName = "Seamless ${rootProject.mod_version} Fabric"
    versionType = "release"
    uploadFile = remapJar
    gameVersions = ["1.20", "1.20.1"]
    loaders = ["fabric"]
    dependencies {
        required.project "architectury-api"
    }
    changelog = rootProject.file("CHANGELOG_LATEST.md").text

    syncBodyFrom = rootProject.file("README.md").text
    tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
}

curseforge {
    project {
        apiKey = System.getenv('CURSEFORGE_TOKEN')
        id = '855593'
        changelog = rootProject.file("CHANGELOG_LATEST.md").text
        changelogType = "markdown"
        releaseType = 'release'
        addGameVersion '1.20'
        addGameVersion '1.20.1'
        addGameVersion 'Fabric'

        relations {
            requiredDependency "architectury-api"
        }
        mainArtifact(remapJar) {
            displayName = "Seamless ${rootProject.mod_version} Fabric"
        }
        options {
            debug = true
            javaVersionAutoDetect = false
            forgeGradleIntegration = false
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
    archiveClassifier = "fabric-${rootProject.version_names}"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
